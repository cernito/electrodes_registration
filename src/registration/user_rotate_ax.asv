function aligned_scan = user_rotate_ax(alignedToSphere, pcMri_model, ax)
    % folderPath = fullfile('C:', 'ÄŒVUT', 'Bakalarka');
    % addpath(folderPath);
    % path
    % 
    % % Point cloud
    % full_file_path = get_user_file_path('*.stl', 'Select the scan of patients head');
    % stl_file = stlread(full_file_path);
    % ptCloud = pointCloud(stl_file.Points);
    % 
    % % Reference point cloud
    % full_file_path = get_user_file_path('*.stl', 'Select the reference of patients head');
    % stl_file = stlread(full_file_path);
    % refCloud = pointCloud(stl_file.Points);
    
    disp(' ');
    disp('USER INPUT:')
    disp('Align the scan with the MRI head model.');
    
    fig = ancestor(ax, 'figure');
    aligned_scan = [];
    ptCloud = alignedToSphere;
    refCloud = pcMri_model;
    % Initialize the final rotation matrix as identity matrix (no rotation initially)
    finalRotationMatrix = eye(3);
    % Store the original point locations (for reference during rotation)
    originalPoints = ptCloud.Location;
    
    % Downsample both point clouds for faster plotting (adjust gridStep to control the subsampling)
    gridStep = 2;  % Adjust this value; larger values reduce the number of points
    subsampledPtCloud = pcdownsample(ptCloud, 'gridAverage', gridStep);  % Subsample the moving point cloud
    subsampledRefCloud = pcdownsample(refCloud, 'gridAverage', gridStep);  % Subsample the reference point cloud
    
    % Set up a loop to continuously rotate the point cloud based on key press
    rotatedPoints = subsampledPtCloud.Location;  % Start with the subsampled points

    % Plot both the reference model and the point cloud
    cla(ax);
    pcshow(subsampledRefCloud.Location,'r', 'Parent' 'MarkerSize', 40);  % Display the reference model
    hold on;           % Keep the reference fixed in the plot
    h = pcshow(subsampledPtCloud.Location, 'g','MarkerSize', 4);  % Display the point cloud with a handle
    xlabel('X-axis');
    ylabel('Y-axis');
    zlabel('Z-axis');
    title('Align the point cloud to match the reference');
    axis equal;
    axis manual;  % Freeze the axis to prevent it from moving during rotation
    rotate3d off;  % Disable interactive view rotation; we will rotate the point cloud instead
    xlabel('front');
    
    % Set initial view to make the reference face forward (e.g., front view)
    view(-6, 10);  % Set azimuth = 90 and elevation = 0 degrees for forward-facing view
    
    % Prompt user for input on how to rotate the point cloud
    disp(' ');
    disp('Use the arrow keys to rotate the point cloud. Press "q" to finish.');
    
    while true
        % Capture the user's key press
        w = waitforbuttonpress;
        key = get(fig, 'CurrentKey');
        
        % Define rotation angles (in radians)
        angle_step = deg2rad(15);  % Rotate by 5 degrees at a time
        
        % Initialize rotation matrix for this step
        R = eye(3);  % Identity matrix (no rotation)
    
        % Rotate based on key press
        switch key
            case 'leftarrow'
                % Rotate around the Z-axis (left arrow key)
                R = [cos(angle_step) -sin(angle_step) 0;
                     sin(angle_step) cos(angle_step)  0;
                     0 0 1];
            case 'rightarrow'
                % Rotate around the Z-axis (right arrow key)
                R = [cos(-angle_step) -sin(-angle_step) 0;
                     sin(-angle_step) cos(-angle_step)  0;
                     0 0 1];
            case 'uparrow'
                % Rotate around the X-axis (up arrow key)
                R = [1 0 0;
                     0 cos(angle_step) -sin(angle_step);
                     0 sin(angle_step) cos(angle_step)];
            case 'downarrow'
                % Rotate around the X-axis (down arrow key)
                R = [1 0 0;
                     0 cos(-angle_step) -sin(-angle_step);
                     0 sin(-angle_step) cos(-angle_step)];
            case 'q'
                % Quit the loop if 'q' is pressed
                break;
            otherwise
                % Skip any other key press
                continue;
        end
        
         % Accumulate the rotation (apply the new rotation to the previous accumulated rotation)
        finalRotationMatrix = R * finalRotationMatrix;
        
        % Apply the accumulated rotation matrix to the subsampled point cloud
        rotatedPoints = (finalRotationMatrix * subsampledPtCloud.Location')';  % Apply the rotation to the subsampled points
        
        % Update the point cloud display with subsampled point cloud
        cla;  % Clear the current axes before plotting again
        pcshow(subsampledRefCloud.Location, 'r', 'MarkerSize', 40);  % Plot the reference in red
        hold on;
        % Plot the moving subsampled point cloud with transparency
        pcshow(rotatedPoints, 'g', 'MarkerSize', 4);  % Blue with transparency
        hold off;
        axis equal;
        axis manual;
        xlabel('front');
        % Set initial view to make the reference face forward (e.g., front view)
        view(-6, 10);  % Set azimuth = 90 and elevation = 0 degrees for forward-facing view
        drawnow;
    end
    
    % Plot the final full-resolution rotated point cloud against the reference
    figure;
    pcshow(refCloud.Location, 'r', 'MarkerSize', 4);  % Plot the reference in red
    hold on;
    pcshow(rotatedPoints, 'MarkerSize', 4);  % Plot the rotated full-resolution point cloud
    hold off;
    xlabel('X-axis');
    ylabel('Y-axis');
    zlabel('Z-axis');
    title('Final Rotated Point Cloud');
    axis equal;
    
    disp('Final rotation applied to full-resolution point cloud.');
    
    % Once the user is finished, apply the final accumulated rotation matrix to the full-resolution point cloud
    finalRotatedPoints = (finalRotationMatrix * originalPoints')';  % Apply the final rotation to the full-resolution points
    
    aligned_scan = pointCloud(finalRotatedPoints);
    
    disp(' ');

end